# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rqdGvrz4Dkc94IDoxwTwKGKnFROF_uef
"""
# app.py

import streamlit as st
import joblib
import numpy as np

# Load model and scaler
model = joblib.load('house_price_model.pkl')
scaler = joblib.load('scaler.pkl')  # Ensure you saved your scaler during training

st.title("üè† House Price Prediction App")
st.markdown("Enter property details below to predict the price.")

# Main input
square_meters = st.number_input("Square Meters (Required)", min_value=20, max_value=500, value=100, step=1)

# Arrange inputs
col1, col2 = st.columns(2)
with col1:
    num_rooms = st.slider("Number of Rooms", 1, 10, 3)
    attic = st.slider("Attic Size (m¬≤)", 0, 100, 10)
    garage = st.slider("Garage Size (m¬≤)", 0, 100, 10)

with col2:
    floors = st.slider("Number of Floors", 1, 5, 1)
    basement = st.slider("Basement Size (m¬≤)", 0, 100, 10)
    city_part_range = st.selectbox("City Part Range (1 = Low, 10 = High)", list(range(1, 11)), index=4)

# Binary features
st.markdown("### Additional Features")
bcol1, bcol2, bcol3, bcol4, bcol5 = st.columns(5)
has_pool = bcol1.checkbox("Pool")
has_yard = bcol2.checkbox("Yard")
is_new = bcol3.checkbox("New")
has_storage = bcol4.checkbox("Storage")
has_storm_protector = bcol5.checkbox("Storm")

# Input feature array
features = np.array([[
    square_meters, num_rooms, floors, attic, basement, garage,
    city_part_range, int(has_pool), int(has_yard), int(is_new),
    int(has_storage), int(has_storm_protector)
]])

# Prediction logic
if st.button("Predict Price"):
    expected_features = 12  # Update if your model has a different count

    # Validations
    if features.shape[1] != expected_features:
        st.error(f"Expected {expected_features} features, but got {features.shape[1]}")
    elif np.isnan(features).any():
        st.error("Input contains missing values. Please complete all fields.")
    else:
        try:
            input_scaled = scaler.transform(features)
            prediction = model.predict(input_scaled)[0]
            st.success(f"üí∞ Estimated House Price: ${prediction:,.2f}")
        except Exception as e:
            st.error(f"Prediction failed: {e}")



